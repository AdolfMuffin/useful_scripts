zabbix_export:
  version: '6.2'
  date: '2022-11-14T13:37:39Z'
  template_groups:
    -
      uuid: e960332b3f6c46a1956486d4f3f99fce
      name: 'Templates/Server hardware'
  templates:
    -
      uuid: 088ba3a58c6740dd82b65d9adbad5ab2
      template: 'SSH storcli RAID checks'
      name: 'SSH storcli RAID checks'
      description: 'https://github.com/AdolfMuffin/useful_scripts/tree/main/zabbix/storcli_raid_monitoring'
      groups:
        -
          name: 'Templates/Server hardware'
      items:
        -
          uuid: 685ed8b179fe4e308b4bd8fb9ee8fc5b
          name: 'Copy script to remote host'
          type: EXTERNAL
          key: 'scp_to_esxi.sh[{HOST.IP}, "{$SSH_USER}", "{$SSH_PW}", "{$LOCAL_PATH}"]'
          delay: 12h
          history: '0'
          trends: '0'
          value_type: TEXT
        -
          uuid: ad904c63579b4fd895653ed6430c9b94
          name: 'Make cache'
          type: SSH
          key: 'ssh.run[vdisk.makecache]'
          delay: 10m
          history: '0'
          trends: '0'
          value_type: TEXT
          params: |
            {$SUDO} {$SCRIPT_PATH} "{$STORCLI}" make_cache_virtual
            {$SUDO} {$SCRIPT_PATH} "{$STORCLI}" make_cache_physical
            {$SUDO} {$SCRIPT_PATH} "{$STORCLI}" make_cache_raid
          username: '{$SSH_USER}'
          password: '{$SSH_PW}'
      discovery_rules:
        -
          uuid: a9cdb878ca064d31b7b10f53e4a1adb9
          name: 'Physical disks discovery'
          type: SSH
          key: 'ssh.run[physical.disks.discovery]'
          delay: 1d
          params: '{$SUDO} {$SCRIPT_PATH} "{$STORCLI}" get_json_physical'
          username: '{$SSH_USER}'
          password: '{$SSH_PW}'
          lifetime: 10d
          item_prototypes:
            -
              uuid: a6a5506fcae3433a9182859d1675c5ee
              name: 'Error count on {#DISKID}'
              type: SSH
              key: 'ssh.run[disk.errors.{#DISKID}]'
              delay: 20m
              history: 30d
              trends: '0'
              params: '{$SUDO} {$SCRIPT_PATH} "{$STORCLI}" get_errors_physical "{#DISKID}"'
              username: '{$SSH_USER}'
              password: '{$SSH_PW}'
              description: 'Суммарное количество ошибок по конкретному диску. В случае с отсутствием ошибок показывает 1.'
              tags:
                -
                  tag: Type
                  value: 'Physical disk'
              trigger_prototypes:
                -
                  uuid: 14077ca2af56482880090395a4a32e75
                  expression: 'last(/SSH storcli RAID checks/ssh.run[disk.errors.{#DISKID}])>10'
                  name: 'Error count on {#DISKID} > 10'
                  priority: WARNING
            -
              uuid: a04acdad46c04c598b00bb38476d4167
              name: 'Model of disk {#DISKID}'
              type: SSH
              key: 'ssh.run[disk.model.{#DISKID}]'
              delay: 20m
              history: 30d
              trends: '0'
              value_type: TEXT
              params: '{$SUDO} {$SCRIPT_PATH} "{$STORCLI}" get_model_physical "{#DISKID}"'
              username: '{$SSH_USER}'
              password: '{$SSH_PW}'
              tags:
                -
                  tag: Type
                  value: 'Physical disk'
            -
              uuid: a608a35a50ca4e64a552170c1585afb3
              name: 'Status of disk {#DISKID}'
              type: SSH
              key: 'ssh.run[disk.state.{#DISKID}]'
              delay: 20m
              history: 30d
              trends: '0'
              value_type: TEXT
              params: '{$SUDO} {$SCRIPT_PATH} "{$STORCLI}" get_status_physical "{#DISKID}"'
              username: '{$SSH_USER}'
              password: '{$SSH_PW}'
              tags:
                -
                  tag: Type
                  value: 'Physical disk'
              trigger_prototypes:
                -
                  uuid: e4053c8ee58344aab5e74757e03b500e
                  expression: 'change(/SSH storcli RAID checks/ssh.run[disk.state.{#DISKID}])<>0'
                  name: 'State of disk {#DISKID} has been changed'
                  priority: HIGH
            -
              uuid: 836170ca33ef477bbe8a86a7ad6deb49
              name: 'Temperature of disk {#DISKID}'
              type: SSH
              key: 'ssh.run[disk.temp.{#DISKID}]'
              delay: 20m
              history: 30d
              trends: '0'
              units: °C
              params: '{$SUDO} {$SCRIPT_PATH} "{$STORCLI}" get_temp_physical "{#DISKID}"'
              username: '{$SSH_USER}'
              password: '{$SSH_PW}'
              tags:
                -
                  tag: Type
                  value: 'Physical disk'
              trigger_prototypes:
                -
                  uuid: f29bffd958374418b782c814cba08656
                  expression: 'last(/SSH storcli RAID checks/ssh.run[disk.temp.{#DISKID}])>50'
                  name: 'Temperature of disk {#DISKID} is too high'
                  priority: AVERAGE
            -
              uuid: 5c31e5d75ec241e697b4c4329d16ef37
              name: 'S.M.A.R.T. flag state for disk {#DISKID}'
              type: SSH
              key: 'ssh.run[smart.flag.{#DISKID}]'
              delay: 20m
              history: 30d
              trends: '0'
              value_type: TEXT
              params: '{$SUDO} {$SCRIPT_PATH} "{$STORCLI}" get_smart_physical "{#DISKID}"'
              username: '{$SSH_USER}'
              password: '{$SSH_PW}'
              tags:
                -
                  tag: Type
                  value: 'Physical disk'
              trigger_prototypes:
                -
                  uuid: ad10dbfeb2b848b488fefa421f24460b
                  expression: 'last(/SSH storcli RAID checks/ssh.run[smart.flag.{#DISKID}])<>"No"'
                  name: 'S.M.A.R.T. on disk {#DISKID} reported a problem'
                  priority: AVERAGE
        -
          uuid: 4f73093200434c20917dac69b1d99ecd
          name: 'RAID controller discovery'
          type: SSH
          key: 'ssh.run[raid.controller.discovery]'
          delay: 1d
          params: '{$SUDO} {$SCRIPT_PATH} "{$STORCLI}" get_json_raid'
